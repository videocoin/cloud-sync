// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: streams/v1/stream_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	rpc "github.com/videocoin/cloud-api/rpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreateStreamRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" validate:"required"`
	ProfileId            string   `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateStreamRequest) Reset()         { *m = CreateStreamRequest{} }
func (m *CreateStreamRequest) String() string { return proto.CompactTextString(m) }
func (*CreateStreamRequest) ProtoMessage()    {}
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_070552407ccdf2ad, []int{0}
}
func (m *CreateStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStreamRequest.Merge(m, src)
}
func (m *CreateStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStreamRequest proto.InternalMessageInfo

func (m *CreateStreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateStreamRequest) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (*CreateStreamRequest) XXX_MessageName() string {
	return "cloud.api.streams.v1.CreateStreamRequest"
}

type StreamRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StreamContractId     uint64   `protobuf:"varint,2,opt,name=stream_contract_id,json=streamContractId,proto3" json:"stream_contract_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_070552407ccdf2ad, []int{1}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StreamRequest) GetStreamContractId() uint64 {
	if m != nil {
		return m.StreamContractId
	}
	return 0
}

func (*StreamRequest) XXX_MessageName() string {
	return "cloud.api.streams.v1.StreamRequest"
}

type UpdateStreamRequest struct {
	Id                    string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StreamContractId      uint64       `protobuf:"varint,3,opt,name=stream_contract_id,json=streamContractId,proto3" json:"stream_contract_id,omitempty"`
	StreamContractAddress string       `protobuf:"bytes,4,opt,name=stream_contract_address,json=streamContractAddress,proto3" json:"stream_contract_address,omitempty"`
	Status                StreamStatus `protobuf:"varint,5,opt,name=status,proto3,enum=cloud.api.streams.v1.StreamStatus" json:"status,omitempty"`
	InputStatus           InputStatus  `protobuf:"varint,6,opt,name=input_status,json=inputStatus,proto3,enum=cloud.api.streams.v1.InputStatus" json:"input_status,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}     `json:"-"`
	XXX_unrecognized      []byte       `json:"-"`
	XXX_sizecache         int32        `json:"-"`
}

func (m *UpdateStreamRequest) Reset()         { *m = UpdateStreamRequest{} }
func (m *UpdateStreamRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateStreamRequest) ProtoMessage()    {}
func (*UpdateStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_070552407ccdf2ad, []int{2}
}
func (m *UpdateStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStreamRequest.Merge(m, src)
}
func (m *UpdateStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStreamRequest proto.InternalMessageInfo

func (m *UpdateStreamRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateStreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateStreamRequest) GetStreamContractId() uint64 {
	if m != nil {
		return m.StreamContractId
	}
	return 0
}

func (m *UpdateStreamRequest) GetStreamContractAddress() string {
	if m != nil {
		return m.StreamContractAddress
	}
	return ""
}

func (m *UpdateStreamRequest) GetStatus() StreamStatus {
	if m != nil {
		return m.Status
	}
	return StreamStatusNone
}

func (m *UpdateStreamRequest) GetInputStatus() InputStatus {
	if m != nil {
		return m.InputStatus
	}
	return InputStatusNone
}

func (*UpdateStreamRequest) XXX_MessageName() string {
	return "cloud.api.streams.v1.UpdateStreamRequest"
}
func init() {
	proto.RegisterType((*CreateStreamRequest)(nil), "cloud.api.streams.v1.CreateStreamRequest")
	golang_proto.RegisterType((*CreateStreamRequest)(nil), "cloud.api.streams.v1.CreateStreamRequest")
	proto.RegisterType((*StreamRequest)(nil), "cloud.api.streams.v1.StreamRequest")
	golang_proto.RegisterType((*StreamRequest)(nil), "cloud.api.streams.v1.StreamRequest")
	proto.RegisterType((*UpdateStreamRequest)(nil), "cloud.api.streams.v1.UpdateStreamRequest")
	golang_proto.RegisterType((*UpdateStreamRequest)(nil), "cloud.api.streams.v1.UpdateStreamRequest")
}

func init() { proto.RegisterFile("streams/v1/stream_service.proto", fileDescriptor_070552407ccdf2ad) }
func init() {
	golang_proto.RegisterFile("streams/v1/stream_service.proto", fileDescriptor_070552407ccdf2ad)
}

var fileDescriptor_070552407ccdf2ad = []byte{
	// 647 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x41, 0x4f, 0x14, 0x3f,
	0x18, 0xc6, 0xff, 0x33, 0xec, 0x7f, 0x94, 0x8a, 0x88, 0x05, 0xd9, 0x61, 0x20, 0x0b, 0x54, 0x0f,
	0x88, 0x32, 0x13, 0x30, 0xe1, 0xc0, 0x4d, 0xc0, 0x28, 0x89, 0x46, 0x33, 0x1b, 0x2f, 0x26, 0x86,
	0x94, 0x69, 0x59, 0x9a, 0xcc, 0x4e, 0x87, 0xb6, 0x33, 0x09, 0x18, 0x2f, 0x7e, 0x05, 0x3f, 0x81,
	0xdf, 0x44, 0x6f, 0x1c, 0x4d, 0xbc, 0x1b, 0x03, 0x7e, 0x02, 0x3f, 0x81, 0xd9, 0xb6, 0x2b, 0xb0,
	0xcc, 0x92, 0x25, 0xe1, 0x36, 0x9d, 0xf7, 0xe9, 0xf3, 0xeb, 0xfb, 0xf6, 0x29, 0x98, 0x95, 0x4a,
	0x50, 0xdc, 0x96, 0x51, 0xb9, 0x1c, 0x99, 0xcf, 0x6d, 0x49, 0x45, 0xc9, 0x12, 0x1a, 0xe6, 0x82,
	0x2b, 0x0e, 0x27, 0x92, 0x94, 0x17, 0x24, 0xc4, 0x39, 0x0b, 0xad, 0x34, 0x2c, 0x97, 0x83, 0xa8,
	0xc5, 0xd4, 0x5e, 0xb1, 0x13, 0x26, 0xbc, 0x1d, 0x95, 0x8c, 0x50, 0x9e, 0x70, 0x96, 0x45, 0x5a,
	0xba, 0x84, 0x73, 0x16, 0x89, 0x3c, 0x89, 0xf6, 0x28, 0x4e, 0xd5, 0x9e, 0xb1, 0x09, 0xa6, 0x5b,
	0x9c, 0xb7, 0x52, 0x1a, 0xe9, 0xd5, 0x4e, 0xb1, 0x1b, 0xd1, 0x76, 0xae, 0x0e, 0x6c, 0x71, 0xc6,
	0x16, 0x3b, 0x3b, 0x71, 0x96, 0x71, 0x85, 0x15, 0xe3, 0x99, 0xb4, 0xd5, 0xa5, 0x33, 0xac, 0x16,
	0x6f, 0xf1, 0x53, 0x8f, 0xce, 0x4a, 0x2f, 0xf4, 0x97, 0x95, 0xd7, 0x2f, 0x74, 0x64, 0x0a, 0xe8,
	0x10, 0x8c, 0x6f, 0x08, 0x8a, 0x15, 0x6d, 0xea, 0xbf, 0x31, 0xdd, 0x2f, 0xa8, 0x54, 0xf0, 0x11,
	0xa8, 0x65, 0xb8, 0x4d, 0x7d, 0x67, 0xce, 0x59, 0x18, 0x5e, 0xaf, 0xff, 0xf9, 0x39, 0x3b, 0x5e,
	0xe2, 0x94, 0x11, 0xac, 0xe8, 0x1a, 0x12, 0x74, 0xbf, 0x60, 0x82, 0x12, 0x14, 0x6b, 0x11, 0x5c,
	0x05, 0x20, 0x17, 0x7c, 0x97, 0xa5, 0x74, 0x9b, 0x11, 0xdf, 0xbd, 0x7c, 0xcb, 0xb0, 0x95, 0x6e,
	0x11, 0xf4, 0x0a, 0xdc, 0x3e, 0x4f, 0x1d, 0x05, 0x2e, 0x23, 0x86, 0x19, 0xbb, 0x8c, 0xc0, 0xc7,
	0x00, 0xda, 0xf1, 0x27, 0x3c, 0x53, 0x02, 0x27, 0xaa, 0x0b, 0xa8, 0xc5, 0x63, 0xa6, 0xb2, 0x61,
	0x0b, 0x5b, 0x04, 0x7d, 0x71, 0xc1, 0xf8, 0xdb, 0x9c, 0x5c, 0xe8, 0xa5, 0xd7, 0x15, 0xda, 0xde,
	0xf4, 0x41, 0x6d, 0x0b, 0xd5, 0xa4, 0xa1, 0x6a, 0x12, 0x5c, 0x05, 0xf5, 0x5e, 0x35, 0x26, 0x44,
	0x50, 0x29, 0xfd, 0x9a, 0x36, 0xbd, 0x77, 0x7e, 0xcb, 0x53, 0x53, 0x84, 0x6b, 0xc0, 0x93, 0x0a,
	0xab, 0x42, 0xfa, 0xff, 0xcf, 0x39, 0x0b, 0xa3, 0x2b, 0x28, 0xac, 0xca, 0x51, 0x68, 0x8e, 0xdf,
	0xd4, 0xca, 0xd8, 0xee, 0x80, 0x9b, 0x60, 0x84, 0x65, 0x79, 0xa1, 0xb6, 0xad, 0x83, 0xa7, 0x1d,
	0xe6, 0xab, 0x1d, 0xb6, 0x3a, 0x4a, 0x6b, 0x70, 0x8b, 0x9d, 0x2e, 0x56, 0xbe, 0xdd, 0xe8, 0xce,
	0xbc, 0x69, 0x02, 0x0d, 0x5f, 0x03, 0xef, 0x85, 0xce, 0x24, 0x9c, 0x0c, 0x4d, 0xe2, 0xc2, 0x6e,
	0x94, 0xc2, 0x67, 0x9d, 0x38, 0x06, 0xd3, 0x67, 0x18, 0x22, 0x4f, 0x42, 0x23, 0x37, 0x86, 0x68,
	0xec, 0xd3, 0x8f, 0xdf, 0x9f, 0x5d, 0x00, 0x6f, 0xda, 0x64, 0x1f, 0x42, 0x05, 0x3c, 0x93, 0x28,
	0xf8, 0xb0, 0xfa, 0x70, 0x15, 0x79, 0x0b, 0xee, 0x5f, 0x36, 0x89, 0x37, 0x26, 0x31, 0x28, 0xd0,
	0xac, 0x09, 0x74, 0x47, 0xbf, 0x89, 0x7f, 0x49, 0x96, 0x6b, 0xce, 0x22, 0x6c, 0x83, 0xa1, 0xe7,
	0x54, 0xc1, 0x4b, 0x7d, 0xae, 0x04, 0x9b, 0xd1, 0xb0, 0x49, 0x38, 0xd1, 0x03, 0x8b, 0x3e, 0x30,
	0xf2, 0x11, 0x26, 0xc0, 0xdb, 0xa4, 0x29, 0x55, 0x74, 0x30, 0x62, 0x9f, 0xd1, 0x76, 0x21, 0x8b,
	0xd5, 0x90, 0xf7, 0xa0, 0xf6, 0x92, 0x49, 0xd5, 0xf7, 0x62, 0x1e, 0x0c, 0xd0, 0x87, 0x44, 0x75,
	0xcd, 0xb8, 0x0b, 0x7b, 0xa7, 0x06, 0x0f, 0x80, 0x67, 0x9e, 0x4b, 0xbf, 0x8b, 0xaa, 0x78, 0x4c,
	0x83, 0xcd, 0x6e, 0x56, 0x23, 0xa7, 0x82, 0xca, 0xb6, 0x3a, 0xb7, 0xd5, 0x04, 0x23, 0x5d, 0x73,
	0x1d, 0xee, 0x2b, 0x1c, 0xa0, 0xdf, 0x28, 0xff, 0x83, 0xfb, 0x60, 0x28, 0x2e, 0xb2, 0x6b, 0x8c,
	0xc0, 0x9c, 0x6e, 0x23, 0x40, 0x7e, 0x55, 0x1b, 0x91, 0x28, 0x32, 0x28, 0x41, 0xad, 0xa9, 0x78,
	0x7e, 0x8d, 0xcc, 0x79, 0xcd, 0x9c, 0x46, 0x53, 0x95, 0x4c, 0xa9, 0x78, 0xbe, 0xee, 0x1f, 0x1d,
	0x37, 0x9c, 0xef, 0xc7, 0x0d, 0xe7, 0xd7, 0x71, 0xc3, 0xf9, 0x7a, 0xd2, 0x70, 0x8e, 0x4e, 0x1a,
	0xce, 0x3b, 0xb7, 0x5c, 0xde, 0xf1, 0xf4, 0x4c, 0x9e, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x88,
	0xc9, 0xa8, 0xab, 0xc0, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamServiceClient interface {
	Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
	Create(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*StreamProfile, error)
	Get(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamProfile, error)
	Delete(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*types.Empty, error)
	List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*StreamProfiles, error)
	Update(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*StreamProfile, error)
	UpdateStatus(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*types.Empty, error)
	Run(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamProfile, error)
	Stop(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamProfile, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Create(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*StreamProfile, error) {
	out := new(StreamProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Get(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamProfile, error) {
	out := new(StreamProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Delete(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*StreamProfiles, error) {
	out := new(StreamProfiles)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Update(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*StreamProfile, error) {
	out := new(StreamProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) UpdateStatus(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Run(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamProfile, error) {
	out := new(StreamProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Stop(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamProfile, error) {
	out := new(StreamProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamServiceServer is the server API for StreamService service.
type StreamServiceServer interface {
	Health(context.Context, *types.Empty) (*rpc.HealthStatus, error)
	Create(context.Context, *CreateStreamRequest) (*StreamProfile, error)
	Get(context.Context, *StreamRequest) (*StreamProfile, error)
	Delete(context.Context, *StreamRequest) (*types.Empty, error)
	List(context.Context, *types.Empty) (*StreamProfiles, error)
	Update(context.Context, *UpdateStreamRequest) (*StreamProfile, error)
	UpdateStatus(context.Context, *UpdateStreamRequest) (*types.Empty, error)
	Run(context.Context, *StreamRequest) (*StreamProfile, error)
	Stop(context.Context, *StreamRequest) (*StreamProfile, error)
}

// UnimplementedStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (*UnimplementedStreamServiceServer) Health(ctx context.Context, req *types.Empty) (*rpc.HealthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedStreamServiceServer) Create(ctx context.Context, req *CreateStreamRequest) (*StreamProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedStreamServiceServer) Get(ctx context.Context, req *StreamRequest) (*StreamProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedStreamServiceServer) Delete(ctx context.Context, req *StreamRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedStreamServiceServer) List(ctx context.Context, req *types.Empty) (*StreamProfiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedStreamServiceServer) Update(ctx context.Context, req *UpdateStreamRequest) (*StreamProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedStreamServiceServer) UpdateStatus(ctx context.Context, req *UpdateStreamRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (*UnimplementedStreamServiceServer) Run(ctx context.Context, req *StreamRequest) (*StreamProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (*UnimplementedStreamServiceServer) Stop(ctx context.Context, req *StreamRequest) (*StreamProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Health(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Create(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Get(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Delete(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).List(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Update(ctx, req.(*UpdateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).UpdateStatus(ctx, req.(*UpdateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Run(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Stop(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.streams.v1.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _StreamService_Health_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _StreamService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StreamService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StreamService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _StreamService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StreamService_Update_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _StreamService_UpdateStatus_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _StreamService_Run_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _StreamService_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "streams/v1/stream_service.proto",
}

func (m *CreateStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStreamService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ProfileId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStreamService(dAtA, i, uint64(len(m.ProfileId)))
		i += copy(dAtA[i:], m.ProfileId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStreamService(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.StreamContractId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStreamService(dAtA, i, uint64(m.StreamContractId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStreamService(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStreamService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.StreamContractId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStreamService(dAtA, i, uint64(m.StreamContractId))
	}
	if len(m.StreamContractAddress) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStreamService(dAtA, i, uint64(len(m.StreamContractAddress)))
		i += copy(dAtA[i:], m.StreamContractAddress)
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStreamService(dAtA, i, uint64(m.Status))
	}
	if m.InputStatus != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintStreamService(dAtA, i, uint64(m.InputStatus))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintStreamService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStreamService(uint64(l))
	}
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovStreamService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStreamService(uint64(l))
	}
	if m.StreamContractId != 0 {
		n += 1 + sovStreamService(uint64(m.StreamContractId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStreamService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStreamService(uint64(l))
	}
	if m.StreamContractId != 0 {
		n += 1 + sovStreamService(uint64(m.StreamContractId))
	}
	l = len(m.StreamContractAddress)
	if l > 0 {
		n += 1 + l + sovStreamService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovStreamService(uint64(m.Status))
	}
	if m.InputStatus != 0 {
		n += 1 + sovStreamService(uint64(m.InputStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStreamService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStreamService(x uint64) (n int) {
	return sovStreamService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreamService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStreamService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractId", wireType)
			}
			m.StreamContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStreamService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStreamService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractId", wireType)
			}
			m.StreamContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StreamStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStatus", wireType)
			}
			m.InputStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputStatus |= InputStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStreamService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStreamService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStreamService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStreamService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStreamService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthStreamService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStreamService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStreamService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthStreamService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStreamService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStreamService   = fmt.Errorf("proto: integer overflow")
)
